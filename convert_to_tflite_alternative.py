import tensorflow as tf
import numpy as np

print("TensorFlow version:", tf.__version__)

# Charge le mod√®le Keras depuis le dossier assets
model = tf.keras.models.load_model('assets/my_model.h5')

# Affiche les informations du mod√®le
print(f"Mod√®le charg√© avec {len(model.layers)} couches")
print(f"Forme d'entr√©e: {model.input_shape}")
print(f"Forme de sortie: {model.output_shape}")

# Cr√©e le convertisseur avec une approche plus simple
converter = tf.lite.TFLiteConverter.from_keras_model(model)

# Configuration minimale pour compatibilit√© maximale
converter.allow_custom_ops = True
converter.experimental_new_converter = False

# D√©sactive toutes les optimisations
converter.optimizations = []

# Force l'utilisation de float32
converter.target_spec.supported_types = [tf.float32]

# Conversion
try:
    print("Conversion en cours...")
    tflite_model = converter.convert()
    
    with open('assets/my_model.tflite', 'wb') as f:
        f.write(tflite_model)
    
    print('‚úÖ Conversion r√©ussie !')
    print('üìÅ Fichier assets/my_model.tflite cr√©√©')
    
    # Test rapide du mod√®le converti
    interpreter = tf.lite.Interpreter(model_content=tflite_model)
    interpreter.allocate_tensors()
    print('‚úÖ Mod√®le TFLite test√© avec succ√®s')
    
except Exception as e:
    print('‚ùå Erreur:', e)
    print('\nüîÑ Tentative avec configuration alternative...')
    
    # Configuration alternative
    try:
        converter = tf.lite.TFLiteConverter.from_keras_model(model)
        converter.allow_custom_ops = True
        converter.experimental_new_converter = True
        
        tflite_model = converter.convert()
        
        with open('assets/my_model.tflite', 'wb') as f:
            f.write(tflite_model)
        
        print('‚úÖ Conversion alternative r√©ussie !')
        print('üìÅ Fichier assets/my_model.tflite cr√©√©')
        
    except Exception as e2:
        print('‚ùå √âchec de la conversion alternative:', e2)
        print('\nüí° Le mod√®le peut n√©cessiter une modification avant conversion')
